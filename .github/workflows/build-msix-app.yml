# This workflow will build, sign, and package a WinUI 3 MSIX desktop application
# built on .NET.

name: Build MSIX app

on:
  push:
    branches: [main, ci]
  pull_request:
    branches: [main]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Release]
        platform: [x64, x86]

    runs-on:
      windows-latest # For a list of available runner types, refer to
      # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: SockboomClient.sln # Replace with your solution name, i.e. App1.sln.

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Install the .NET Core workload
      - name: Install .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.406

      # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v1.0.2

      # Restore the application to populate the obj folder with RuntimeIdentifiers
      - name: Restore the application
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
        env:
          Configuration: ${{ matrix.configuration }}

      # Decode the base 64 encoded pfx and save the Signing_Certificate
      - name: Decode the pfx
        run: |
          $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
          $certificatePath = "GitHubActionsWorkflow.pfx"
          [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

      - name: debug pfx
        run: ls

      # Create the app package by building and packaging the project
      - name: Create the app package
        run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration /p:Platform=$env:Platform /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=$env:Path_PFX /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true /p:PackageCertificatePassword="${{secrets.PFX_PASSWORD}}"
        env:
          Appx_Bundle: Never
          Appx_Package_Build_Mode: SideloadOnly
          Appx_Package_Dir: Packages\
          Configuration: ${{ matrix.configuration }}
          Platform: ${{ matrix.platform }}
          Path_PFX: ${{ github.workspace }}\GitHubActionsWorkflow.pfx

      # Remove the pfx
      - name: Remove the pfx
        run: Remove-Item -path GitHubActionsWorkflow.pfx

      # Zip Pack
      - name: Zip the package
        run: |
          cd 'SockboomClient (Package)\\Packages\\'
          Compress-Archive -Path .\ -DestinationPath ..\\SockboomClient.zip

      # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
      - name: Upload MSIX package
        uses: actions/upload-artifact@v2
        with:
          name: Sockboom Client MSIX ${{ matrix.platform }}
          path: ${{ github.workspace }}\\SockboomClient (Package)\\SockboomClient.zip
